# Python source code generated by SCC (StateChart Compiler) 0.3, written by Thomas Feng
#     Source: BiBler_Statechart.des
#     Date:     March 20, 2005
#     Time:     23:11:50

import time

class BiBler_Statechart(object):

    def __init__(self, Interpreter=None, Parent=None, OldInstance=None):
        self.Parent=Parent
        self.Interpreter = Interpreter
        self.state = ''
    
    def initModel(self):
        pass
    
    def exit(self):
        pass
    
    def statusBar(self, controller):
        controller.updateStatusBar()
        time.sleep(.75)
        controller.clearStatusBar()

    def event(self, e, controller=None):
        if e == 'start':
            self.state = 'start'
        elif e == 'exitClicked':
            if controller.hasUnsavedModifications():
                controller.popupConfirmExitDialog()
            else:
                controller.exit()
            self.state = 'exit'
        elif e == 'openClicked':
            controller.popupOpenDialog()
            self.state = 'open'
        elif e == 'openFileSelected':
            controller.openFile()
            controller.displayEntries()
            controller.clearEditor()
            controller.clearPreviewer()
            controller.unselectEntryRow()
            controller.updateStatusTotal()
            controller.enableUndo()
            self.state = 'openComplete'
            controller.setStatusMsg('Total: ' + str(controller.getDisplayedEntryCount()))
            self.statusBar(controller)
        elif e == 'saveClicked':
            if controller.isBibtexFileLoaded():
                self.event('saveFileSelected', controller)
            else:
                self.event('saveAsClicked', controller)
            self.state = 'save'
        elif e == 'saveAsClicked':
            controller.popupSaveDialog()
            self.state = 'save as'
        elif e == 'saveFileSelected':
            controller.saveFile()
            controller.setStatusMsg('Bibliography saved.')
            self.statusBar(controller)
            controller.unsetDirtyTitle()
            self.state = 'saveComplete'
        elif e == 'importClicked':
            controller.popupImportDialog()
            self.state = 'import'
        elif e == 'importFileSelected':
            controller.importFile()
            controller.displayEntries()
            controller.clearEditor()
            controller.clearPreviewer()
            controller.unselectEntryRow()
            controller.updateStatusTotal()
            controller.enableUndo()
            self.state = 'importComplete'
            controller.setStatusMsg('Imported complete. Total: ' + str(controller.getDisplayedEntryCount()))
            self.statusBar(controller)
        elif e == 'exportClicked':
            controller.popupExportDialog()
            self.state = 'export'
        elif e == 'exportFileSelected':
            controller.exportFile()
            controller.setStatusMsg('Export complete.')
            self.statusBar(controller)
            self.state = 'exportComplete'
        elif e == 'addClicked':
            controller.addEntry()
            controller.addNewEntryRow()
            controller.selectCurrentEntryRow()
            controller.setDirtyTitle()
            controller.enableUndo()
            controller.updateStatusTotal()
            self.state = 'add'        
        elif e == 'addNewEntryClicked':
            controller.popupAddNewEntryDialog()
            self.state = 'addClicked'
        elif e == 'entryTypeSelected':
            controller.addEntry()
            controller.addNewEntryRow()
            controller.selectCurrentEntryRow()
            controller.setDirtyTitle()
            controller.enableUndo()
            controller.updateStatusTotal()
            self.state = 'add'
        elif e == 'entrySelected':
            controller.getBibTeX()
            controller.getEntryDict()
            controller.setValidationMsgInStatus()
            controller.displayBibTexInEditor()
            controller.getEntryRequiredFields()
            controller.getEntryOptionalFields()
            controller.getEntryAdditionalFields()
            controller.displayRequiredFields()
            controller.displayOptionalFields()
            controller.displayAdditionalFields()
            controller.previewEntry()
            controller.previewEntryHTML()
            controller.enableDelete()
            controller.enableDuplicate()
            self.state = 'entrySelected'
        elif e == 'entryDeselected':
            controller.clearStatusBar()
            controller.clearEditor()
            controller.clearPreviewer()
            controller.disableUpdateButton()
            controller.disableDelete()
            controller.disableDuplicate()
            self.state = 'idle'
        elif e == 'entryDoubleClicked':
            controller.getEntryPaperURL()
            if controller.currentEntryHasPaper():
                controller.openEntryPaper()
            self.state = 'openPaper'
        elif e == 'textChangedInEditor':
            if controller.isEntrySelected():
                controller.enableUpdateButton()
            self.state = 'editorTextChanged'            
        elif e == 'textChangedInFieldEditor':
            controller.enableUpdateButton()
            controller.updateEntryField()
            controller.clearBibtexEditor()
            controller.getBibTeX()
            controller.displayBibTexInEditor()
            self.state = 'FieldEditorChanged'
        elif e == 'updateButtonClicked':
            controller.disableUpdateButton()
            controller.updateEntry()
            controller.updateSelectedEntryRow()
            controller.getBibTeX()
            controller.getEntryRequiredFields()
            controller.getEntryOptionalFields()
            controller.getEntryAdditionalFields()
            controller.displayRequiredFields()
            controller.displayOptionalFields()
            controller.displayAdditionalFields()
            controller.previewEntry()
            controller.previewEntryHTML()
            controller.setDirtyTitle()
            controller.enableUndo()
            self.state = 'update'
        elif e == 'deleteClicked':
            controller.deleteEntry()
            controller.removeEntryRow()
            controller.clearEditor()
            controller.clearPreviewer()
            controller.unselectEntryRow()
            controller.setDirtyTitle()
            controller.updateStatusTotal()
            controller.enableUndo()
            self.state = 'delete'
        elif e == 'duplicateClicked':
            controller.duplicateEntry()
            controller.addNewEntryRow()
            controller.selectCurrentEntryRow()
            controller.setDirtyTitle()
            controller.updateStatusTotal()
            controller.enableUndo()
            self.state = 'duplicateComplete'
        elif e == 'genKeysClicked':
            controller.generateAllKeys()
            controller.getAllEntries()
            controller.displayEntries()
            controller.setDirtyTitle()
            self.state = 'genKeysComplete'
        elif e == 'validateAllClicked':
            controller.validateAll()
            controller.popupValidationResultMessage()
            self.state = 'validateAllComplete'
        elif e == 'undoClicked':
            controller.undo()
            controller.getAllEntries()
            controller.displayEntries()
            controller.clearEditor()
            controller.clearPreviewer()
            controller.setDirtyTitle()
            if (not controller.hasUndoableActionLeft()):
                controller.disableUndo()
        elif e == 'searchClicked':
            controller.popupSearchDialog()
            self.state = 'search'
        elif e == 'filterClicked':
            controller.search()
            if (controller.getDisplayedEntryCount() > 0):
                controller.enableClearFilter()
                controller.displayEntries()
                controller.unselectEntryRow()
            controller.setStatusMsg(str(controller.getDisplayedEntryCount()) + ' results found')
            self.statusBar(controller)
            controller.updateStatusTotal()
            self.state = 'searchComplete'
        elif e == 'clearFilterClicked':
            controller.clearSearch()
            controller.disableClearFilter()
            controller.getAllEntries()
            controller.displayEntries()
            controller.clearEditor()
            controller.clearPreviewer()
            controller.unselectEntryRow()
            controller.updateStatusTotal()
        elif e == 'preferencesClicked':
            controller.popupPreferencesDialog()
            self.state = 'preferences'
        elif e == 'preferencesChanged':
            if controller.isEntrySelected():
                controller.previewEntry()
                controller.previewEntryHTML()
            self.state = 'preferencesComplete'
        elif e == 'aboutClicked':
            controller.popupAboutDialog()
            self.state = 'about'
        elif e == 'manualClicked':
            controller.popupUserManualWindow()
            self.state = 'manual'
        elif e == 'colClicked':
            controller.sort()
            if controller.isInSearch():
                controller.search()
            else:
                controller.getAllEntries()
            controller.displayEntries()
            controller.unselectEntryRow()
            controller.setDirtyTitle()
            self.state = 'colClicked'
        elif e == 'cancelClicked':
            self.state = 'idle'
        elif e == 'error':
            controller.popupErrorMessage()
        else:
            self.state = 'idle'
        #print (self.state)
